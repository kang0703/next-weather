---
alwaysApply: false
---

# 갈래말래 날씨여행 프로젝트 규칙

## 프로젝트 개요
- **사이트 제목**: 갈래말래 날씨여행
- **기술 스택**: Next.js 15.3.3 + React 19 + TypeScript + Tailwind CSS
- **목표**: 애드센스 승인을 받아 수익구조 구축
- **배포 플랫폼**: Cloudflare Workers

## API 정보
- **OpenWeatherMap API**: 3a821b91dd99ce14a86001543d3bfe42
- **공공데이터포털**: UxGu0qkZpzkbKj1TkyefegskQ9MNmCQf2gAnEc9yeHLuY6bpBT0CHXbEIu+YebmRqLeV4RoqzgpZbvuOYhnQuQ==

## API 호출 규칙

### OpenWeatherMap API
- **현재 날씨**: `/data/2.5/weather`
- **5일 예보**: `/data/2.5/forecast`
- **단위**: metric (섭씨)
- **언어**: kr (한국어)
- **좌표 기반**: 위도/경도로 우선 호출
- **도시명 기반**: 좌표 실패 시 폴백
- **CORS**: 지원 (클라이언트에서 직접 호출 가능)

### 공공데이터포털 API ⚠️ CORS 제한
- **제공기관**: 한국관광공사
- **API 유형**: REST
- **데이터포맷**: JSON+XML
- **비용**: 무료
- **트래픽**: 개발계정 1,000회, 운영계정은 활용사례 등록 시 증가
- **CORS 정책**: 클라이언트에서 직접 호출 불가
- **해결 방안**: Next.js API Routes를 통한 프록시 서버 구현
- **구현 방식**: `/api/tourism` 엔드포인트 생성
- **에러 처리**: API 실패 시 임시 데이터 표시

## CORS 문제 해결 방안

### 1. Next.js API Routes 사용 (권장)
```typescript
// app/api/tourism/route.ts
export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const location = searchParams.get('location') || '서울';
  const type = searchParams.get('type') || 'festival'; // festival, stay, restaurant, tourism
  
  try {
    // 한국관광공사 API 호출 (실제 엔드포인트는 공식 문서 확인 필요)
    const response = await fetch(
      `https://api.visitkorea.or.kr/openapi/service/rest/KorService/${type}?serviceKey=${process.env.PUBLIC_DATA_API_KEY}&numOfRows=10&pageNo=1&MobileOS=ETC&MobileApp=AppTest&listYN=Y&arrange=A&_type=json`,
      { 
        headers: { 
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        } 
      }
    );
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    return Response.json(data);
  } catch (error) {
    console.error('한국관광공사 API 호출 실패:', error);
    return Response.json({ 
      error: '데이터를 가져올 수 없습니다.',
      message: '일시적인 서비스 장애가 발생했습니다.'
    }, { status: 500 });
  }
}
```

### 2. 한국관광공사 API 상세 정보
```typescript
// 한국관광공사 API 설정 (공식 문서 기반)
const KOREA_TOURISM_CONFIG = {
  baseUrl: 'https://api.visitkorea.or.kr/openapi/service/rest/KorService',
  serviceKey: process.env.PUBLIC_DATA_API_KEY,
  endpoints: {
    searchFestival: '/searchFestival',        // 축제 검색
    searchStay: '/searchStay',                // 숙박 검색
    searchRestaurant: '/searchRestaurant',    // 음식점 검색
    searchTourism: '/searchTourism',          // 관광지 검색
    areaCode: '/areaCode',                    // 지역 코드
    sigunguCode: '/sigunguCode'              // 시군구 코드
  },
  params: {
    MobileOS: 'ETC',
    MobileApp: 'AppTest',
    _type: 'json',                           // JSON 응답 요청
    numOfRows: 10,                           // 한 번에 가져올 데이터 수
    pageNo: 1                                // 페이지 번호
  }
};
```

### 3. 클라이언트에서 API Routes 호출
```typescript
// 컴포넌트에서 사용
const fetchTourismData = async (location: string, type: string = 'festival') => {
  try {
    const response = await fetch(`/api/tourism?location=${encodeURIComponent(location)}&type=${type}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('관광 정보를 가져올 수 없습니다:', error);
    return null;
  }
};
```

### 4. 환경 변수 설정
```env
# .env.local
NEXT_PUBLIC_OPENWEATHER_API_KEY=3a821b91dd99ce14a86001543d3bfe42
PUBLIC_DATA_API_KEY=UxGu0qkZpzkbKj1TkyefegskQ9MNmCQf2gAnEc9yeHLuY6bpBT0CHXbEIu+YebmRqLeV4RoqzgpZbvuOYhnQuQ==
```

## 메인화면 구성 규칙

### 1. 상단 헤더
- **로고**: 왼쪽에 "갈래말래 날씨여행" 로고 (️ 이모지 포함)
- **햄버거 메뉴**: 우측에 햄버거 메뉴 버튼
- **메뉴 항목**: 홈, 날씨 정보, 여행지 추천, 행사/축제, 커뮤니티

### 2. 메인 콘텐츠
- **현재 위치 날씨 정보**: 온도, 체감온도, 습도, 풍속, 기압, 날씨 상태
- **5일 예보**: 각 날짜별 날씨 정보 (온도, 습도, 날씨 상태)
- **행사/축제 정보**: 현재 위치의 진행 중인 행사, 축제 정보

### 3. 데이터 표시 규칙
- 각 API에서 제공하는 모든 정보를 화면에 표시
- 사용자 현재 위치 자동 감지 (Geolocation API 사용)
- 위치 정보 접근 불가 시 기본값으로 "서울" 사용

## 컴포넌트 구조 규칙

### 필수 컴포넌트
1. **Header**: 로고 + 햄버거 메뉴
2. **CurrentWeather**: 현재 날씨 정보 표시
3. **FiveDayForecast**: 5일 예보 표시
4. **EventsFestivals**: 행사/축제 정보 표시

### 컴포넌트 설계 원칙
- TypeScript 인터페이스 정의 필수
- 로딩 상태 처리 (스켈레톤 UI)
- 에러 처리 및 폴백 UI
- 반응형 디자인 (모바일 우선)

## 환경 변수 관리 규칙

### 권장 방식: .env.local
- **파일명**: `.env.local` (git에 커밋되지 않음)
- **형식**: 
  - `NEXT_PUBLIC_` 접두사: 클라이언트에서 사용
  - 일반 환경변수: 서버에서만 사용
- **예시**:
  ```
  NEXT_PUBLIC_OPENWEATHER_API_KEY=3a821b91dd99ce14a86001543d3bfe42
  PUBLIC_DATA_API_KEY=UxGu0qkZpzkbKj1TkyefegskQ9MNmCQf2gAnEc9yeHLuY6bpBT0CHXbEIu+YebmRqLeV4RoqzgpZbvuOYhnQuQ==
  ```

### 대안 방식: config.js
- **파일명**: `src/config/api-keys.js`
- **형식**: JavaScript 객체로 관리
- **예시**:
  ```javascript
  export const API_KEYS = {
    OPENWEATHER: '3a821b91dd99ce14a86001543d3bfe42',
    PUBLIC_DATA: 'UxGu0qkZpzkbKj1TkyefegskQ9MNmCQf2gAnEc9yeHLuY6bpBT0CHXbEIu+YebmRqLeV4RoqzgpZbvuOYhnQuQ=='
  };
  ```

## UI/UX 규칙

### 색상 체계
- **주 색상**: 파란색 계열 (#3B82F6, #1E40AF)
- **보조 색상**: 보라색 계열 (#8B5CF6, #7C3AED)
- **배경**: 그라데이션 (파란색 → 인디고)
- **카드**: 흰색 배경 + 그림자

### 아이콘 규칙
- **날씨 아이콘**: OpenWeatherMap 아이콘 코드를 이모지로 매핑
- **카테고리 아이콘**: 행사/축제 카테고리별 색상 구분
- **로딩**: 스켈레톤 UI + 스피너

### 반응형 규칙
- **모바일 우선**: 320px ~ 768px
- **태블릿**: 768px ~ 1024px
- **데스크톱**: 1024px 이상
- **그리드**: 1열 → 2열 → 3열 순차적 확장

## 코드 품질 규칙

### TypeScript
- 모든 컴포넌트에 인터페이스 정의
- API 응답 데이터 타입 정의
- Props 타입 명시

### 에러 처리
- try-catch 블록으로 API 호출 감싸기
- 사용자 친화적 에러 메시지
- 로딩 상태와 에러 상태 구분

### 성능 최적화
- useEffect 의존성 배열 최적화
- 불필요한 리렌더링 방지
- 이미지 최적화 (Next.js Image 컴포넌트)

## SEO 및 메타데이터 규칙

### 메타데이터
- **제목**: "갈래말래 날씨여행 - 날씨를 보고 여행을 계획하세요"
- **설명**: 실시간 날씨 정보와 여행 추천 서비스
- **키워드**: 날씨, 여행, 날씨여행, 갈래말래, 기상정보
- **언어**: 한국어 (ko)

### Open Graph
- 소셜 미디어 공유 최적화
- 제목, 설명, 이미지 설정

## 배포 및 환경 규칙

### 개발 환경
- `npm run dev`: 개발 서버 실행
- `npm run build`: 프로덕션 빌드
- `npm run lint`: 코드 품질 검사

### 배포 환경
- Cloudflare Workers 배포
- 환경별 환경 변수 분리
- API 키 보안 관리

## 보안 규칙

### API 키 관리
- 환경 변수로 API 키 관리
- 클라이언트 사이드 노출 최소화
- API 키 순환 정책 수립

### 사용자 데이터
- 위치 정보 암호화
- 개인정보 수집 최소화
- GDPR 준수

## 확장 계획

### 단계별 기능 추가
1. **1단계**: 기본 날씨 정보 + 5일 예보
2. **2단계**: 행사/축제 정보 + 지도 통합
3. **3단계**: 사용자 계정 + 개인화
4. **4단계**: 커뮤니티 + 수익화

### 수익화 전략
- Google AdSense 승인 준비
- 충분한 콘텐츠와 트래픽 확보
- SEO 최적화로 검색 노출 증가
- 사용자 참여도 향상